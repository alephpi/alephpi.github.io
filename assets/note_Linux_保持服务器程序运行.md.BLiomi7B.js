import{_ as a,c as e,ao as n,o as p}from"./chunks/framework.n-91xA-b.js";const u=JSON.parse('{"title":"保持服务器程序运行","description":"","frontmatter":{"title":"保持服务器程序运行","date":"2023-07-11T09:44:28.899Z","length":"206字","time":"1分钟","aside":true,"hash":-1818950622},"headers":[],"relativePath":"note/Linux/保持服务器程序运行.md","filePath":"note/Linux/保持服务器程序运行.md"}'),o={name:"note/Linux/保持服务器程序运行.md"};function t(c,s,d,i,l,r){return p(),e("div",null,s[0]||(s[0]=[n('<p>在云服务平台申请到一个实例后，我们就可以把模型放上去训练了。训练时间一般较久，但又不想保持主机和服务器的连接怎么办？ 我们可以使用后台进程(background process)，保证进程独立于当前终端会话(session)，不因终端会话关闭而停止。比如打开一终端会话，执行</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki solarized-dark vp-code" tabindex="0"><code><span class="line"><span>python my_proc.py &amp;</span></span></code></pre></div><p>将返回进程数，譬如</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki solarized-dark vp-code" tabindex="0"><code><span class="line"><span>[1] 1024</span></span></code></pre></div><p>关闭该会话</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki solarized-dark vp-code" tabindex="0"><code><span class="line"><span>exit</span></span></code></pre></div><p>然后再建立一个新的会话，使用</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki solarized-dark vp-code" tabindex="0"><code><span class="line"><span>ps -fx</span></span></code></pre></div><p>可以找到当前机器的所有运行进程。</p><p>注意，必须通过<code>exit</code>终止对话才可以保证background process始终运行。直接拔网线或者用图形界面关闭会话窗口都会造成<code>unexpectedly disconnection</code>，这样所有进程都会打断。</p>',10)]))}const g=a(o,[["render",t]]);export{u as __pageData,g as default};
