import{_ as o,c as s,g as t,a,o as n}from"./chunks/framework.n-91xA-b.js";const m=JSON.parse('{"title":"python爬虫爬取纯前端渲染DOM","description":"","frontmatter":{"title":"python爬虫爬取纯前端渲染DOM","date":"2023-09-07T01:43:09.596Z","length":"232字","time":"1分钟","aside":true,"hash":1305836669},"headers":[],"relativePath":"note/编程/python爬虫爬取纯前端渲染DOM.md","filePath":"note/编程/python爬虫爬取纯前端渲染DOM.md"}'),r={name:"note/编程/python爬虫爬取纯前端渲染DOM.md"};function p(l,e,_,i,h,d){return n(),s("div",null,e[0]||(e[0]=[t("p",null,[a("最近在做"),t("a",{href:"https://github.com/alephpi/jianzipu",target:"_blank",rel:"noreferrer"},"减字谱生成的项目"),a("，我的解析引擎是用python写的，但渲染用的KAGE引擎是js。我希望测试经过微调的kage数据渲染效果，就想如何用python调用js。因为仅仅为了测试，并不想重构js代码，也不想使用服务器。那是否可以简单地做一个纯前端的页面，其中植入kage引擎，用爬虫发送带参数的url请求，页面从url参数中获取kage数据然后渲染出svg植入dom，爬虫爬取dom。这相当迂回，但在浏览器中可以实现，而用requests却不能爬取，这是因为在爬取时，requests爬虫无法执行页面中的js代码，也就无从渲染svg了。于是我们必须借助能使用浏览器内核的爬虫引擎，譬如selenium来模拟浏览器环境渲染svg了。")],-1)]))}const u=o(r,[["render",p]]);export{m as __pageData,u as default};
