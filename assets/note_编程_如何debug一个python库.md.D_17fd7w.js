import{_ as n,c as o,ao as a,o as p}from"./chunks/framework.n-91xA-b.js";const _=JSON.parse('{"title":"如何 debug 一个 python 库","description":"","frontmatter":{"title":"如何 debug 一个 python 库","date":"2025-03-18T15:38:40.491Z","length":"609字","time":"3分钟","aside":true,"hash":425310161},"headers":[],"relativePath":"note/编程/如何debug一个python库.md","filePath":"note/编程/如何debug一个python库.md"}'),l={name:"note/编程/如何debug一个python库.md"};function e(t,s,c,r,i,y){return p(),o("div",null,s[0]||(s[0]=[a(`<p>我们之前提过如何在 vscode 中优雅的使用 debugpy 来调试代码，但在那里我们主要考虑的是开发阶段的代码，也就是说代码是在本地仓库中而非安装在环境中。那么如何调试一个已安装在环境中的代码库呢？</p><p>先讲讲背景：我在虚拟环境中安装了 bonito 库，同时本地也拉下来了 bonito 库，那么我就面临两种选择：</p><ol><li>调试在 <code>~/workspace/bonito</code> 的本地库</li><li>调试在 <code>~/micromamba/envs/bonito</code> 中的安装库</li></ol><p>由于 bonito 提供了 cli 工具，因此在命令行中可以直接用 <code>bonito</code> 来启用它。于是我首先想的是我并不能在 <code>xxx.py</code> 文件头部分添加 debugpy 的代码，然后运行 <code>python xxx.py</code> 来调试，所以选择第一种方法。</p><p>我尝试了<code>python bonito/__init__.py</code>，不行。因为 <code>__init__.py</code>不允许直接运行，它理应以模块的方式被运行即 <code>python -m bonito/__init__.py</code>，但后者我没有尝试。然后我尝试使用 <code>python bonito/__main__.py</code>，是可以连接上 debugpy，但是又会陷入 import error，因为本地库与已安装在环境中的库同名，所以会导致路径解析错误等问题。如果想要继续使用第一种方法，那么就需要卸载环境中的 <code>pip uninstall bonito</code>，然后安装开发依赖 <code>pip install -r requirements.txt</code>，这样就可以规避路径问题。</p><p>于是我考虑第二种方法。一般来说我们可以在环境中的 bonito 库下的对应文件中添加 debugpy 的代码，但是我发现因为 bonito cli 直接注册在了 <code>~/.local/bin/bonito</code> 路径下，因此直接修改代码如下：（注意这个文件不是<code>.py</code>而是一个由 shell 执行的脚本文件，只不过 shell 会调用 python3 来执行它）</p><div class="language-py"><button title="Copy Code" class="copy"></button><span class="lang">py</span><pre class="shiki solarized-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#839496;">!</span><span style="color:#859900;">/</span><span style="color:#839496;">usr</span><span style="color:#859900;">/</span><span style="color:#268BD2;">bin</span><span style="color:#859900;">/</span><span style="color:#839496;">python3</span></span>
<span class="line"><span style="color:#586E75;font-style:italic;"># -*- coding: utf-8 -*-</span></span>
<span class="line"><span style="color:#859900;">import</span><span style="color:#839496;"> re</span></span>
<span class="line"><span style="color:#859900;">import</span><span style="color:#839496;"> sys</span></span>
<span class="line"><span style="color:#859900;">from</span><span style="color:#839496;"> bonito </span><span style="color:#859900;">import</span><span style="color:#839496;"> main</span></span>
<span class="line"></span>
<span class="line"><span style="color:#586E75;font-style:italic;"># debug_bonito.py</span></span>
<span class="line"><span style="color:#859900;">import</span><span style="color:#839496;"> debugpy</span></span>
<span class="line"><span style="color:#859900;">import</span><span style="color:#839496;"> sys</span></span>
<span class="line"></span>
<span class="line"><span style="color:#586E75;font-style:italic;"># Start debugger server and wait for attachment</span></span>
<span class="line"><span style="color:#839496;">debugpy.listen((</span><span style="color:#2AA198;">&quot;localhost&quot;</span><span style="color:#839496;">, </span><span style="color:#D33682;">5678</span><span style="color:#839496;">))</span></span>
<span class="line"><span style="color:#268BD2;">print</span><span style="color:#839496;">(</span><span style="color:#2AA198;">&quot;Waiting for debugger to attach at localhost:5678...&quot;</span><span style="color:#839496;">)</span></span>
<span class="line"><span style="color:#839496;">debugpy.wait_for_client()</span></span>
<span class="line"><span style="color:#839496;">debugpy.breakpoint()  </span><span style="color:#586E75;font-style:italic;"># Initial breakpoint</span></span>
<span class="line"></span>
<span class="line"><span style="color:#859900;">if</span><span style="color:#839496;"> __name__ </span><span style="color:#859900;">==</span><span style="color:#2AA198;"> &#39;__main__&#39;</span><span style="color:#839496;">:</span></span>
<span class="line"><span style="color:#839496;">    sys.argv[</span><span style="color:#D33682;">0</span><span style="color:#839496;">] </span><span style="color:#859900;">=</span><span style="color:#839496;"> re.sub(</span><span style="color:#93A1A1;font-weight:bold;">r</span><span style="color:#DC322F;">&#39;(-script</span><span style="color:#CB4B16;">\\.</span><span style="color:#DC322F;">pyw</span><span style="color:#859900;">|</span><span style="color:#CB4B16;">\\.</span><span style="color:#DC322F;">exe)</span><span style="color:#859900;">?</span><span style="color:#DC322F;">$&#39;</span><span style="color:#839496;">, </span><span style="color:#2AA198;">&#39;&#39;</span><span style="color:#839496;">, sys.argv[</span><span style="color:#D33682;">0</span><span style="color:#839496;">])</span></span>
<span class="line"><span style="color:#839496;">    sys.exit(main())</span></span></code></pre></div><p>这样当我们在命令行中直接运行 <code>bonito</code> 时，就会等待调试器连接。往后就和前文介绍的一样调试即可。不过要记得在调试完成后把调试代码删除。当然你也可以另外创建一个调试脚本调用 <code>bonito</code> 以免干扰。</p>`,8)]))}const b=n(l,[["render",e]]);export{_ as __pageData,b as default};
